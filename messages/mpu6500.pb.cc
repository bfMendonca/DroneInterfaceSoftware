// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpu6500.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mpu6500.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MPU6500Readings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MPU6500Readings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mpu6500_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mpu6500_2eproto() {
  protobuf_AddDesc_mpu6500_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mpu6500.proto");
  GOOGLE_CHECK(file != NULL);
  MPU6500Readings_descriptor_ = file->message_type(0);
  static const int MPU6500Readings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, accelerometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, gyroscope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, timestamp_),
  };
  MPU6500Readings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MPU6500Readings_descriptor_,
      MPU6500Readings::default_instance_,
      MPU6500Readings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, _has_bits_[0]),
      -1,
      -1,
      sizeof(MPU6500Readings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPU6500Readings, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mpu6500_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MPU6500Readings_descriptor_, &MPU6500Readings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mpu6500_2eproto() {
  delete MPU6500Readings::default_instance_;
  delete MPU6500Readings_reflection_;
}

void protobuf_AddDesc_mpu6500_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mpu6500_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_vector3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmpu6500.proto\032\rvector3.proto\"w\n\017MPU650"
    "0Readings\022\037\n\raccelerometer\030\001 \002(\0132\010.Vecto"
    "r3\022\033\n\tgyroscope\030\002 \002(\0132\010.Vector3\022\023\n\013tempe"
    "rature\030\003 \002(\002\022\021\n\ttimestamp\030\004 \002(\004", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mpu6500.proto", &protobuf_RegisterTypes);
  MPU6500Readings::default_instance_ = new MPU6500Readings();
  MPU6500Readings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mpu6500_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mpu6500_2eproto {
  StaticDescriptorInitializer_mpu6500_2eproto() {
    protobuf_AddDesc_mpu6500_2eproto();
  }
} static_descriptor_initializer_mpu6500_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPU6500Readings::kAccelerometerFieldNumber;
const int MPU6500Readings::kGyroscopeFieldNumber;
const int MPU6500Readings::kTemperatureFieldNumber;
const int MPU6500Readings::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPU6500Readings::MPU6500Readings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPU6500Readings)
}

void MPU6500Readings::InitAsDefaultInstance() {
  accelerometer_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
  gyroscope_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

MPU6500Readings::MPU6500Readings(const MPU6500Readings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MPU6500Readings)
}

void MPU6500Readings::SharedCtor() {
  _cached_size_ = 0;
  accelerometer_ = NULL;
  gyroscope_ = NULL;
  temperature_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MPU6500Readings::~MPU6500Readings() {
  // @@protoc_insertion_point(destructor:MPU6500Readings)
  SharedDtor();
}

void MPU6500Readings::SharedDtor() {
  if (this != default_instance_) {
    delete accelerometer_;
    delete gyroscope_;
  }
}

void MPU6500Readings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPU6500Readings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MPU6500Readings_descriptor_;
}

const MPU6500Readings& MPU6500Readings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpu6500_2eproto();
  return *default_instance_;
}

MPU6500Readings* MPU6500Readings::default_instance_ = NULL;

MPU6500Readings* MPU6500Readings::New(::google::protobuf::Arena* arena) const {
  MPU6500Readings* n = new MPU6500Readings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPU6500Readings::Clear() {
// @@protoc_insertion_point(message_clear_start:MPU6500Readings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MPU6500Readings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MPU6500Readings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(timestamp_, temperature_);
    if (has_accelerometer()) {
      if (accelerometer_ != NULL) accelerometer_->::Vector3::Clear();
    }
    if (has_gyroscope()) {
      if (gyroscope_ != NULL) gyroscope_->::Vector3::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MPU6500Readings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MPU6500Readings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vector3 accelerometer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accelerometer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gyroscope;
        break;
      }

      // required .Vector3 gyroscope = 2;
      case 2: {
        if (tag == 18) {
         parse_gyroscope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyroscope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_temperature;
        break;
      }

      // required float temperature = 3;
      case 3: {
        if (tag == 29) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MPU6500Readings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MPU6500Readings)
  return false;
#undef DO_
}

void MPU6500Readings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MPU6500Readings)
  // required .Vector3 accelerometer = 1;
  if (has_accelerometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->accelerometer_, output);
  }

  // required .Vector3 gyroscope = 2;
  if (has_gyroscope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gyroscope_, output);
  }

  // required float temperature = 3;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temperature(), output);
  }

  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MPU6500Readings)
}

::google::protobuf::uint8* MPU6500Readings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MPU6500Readings)
  // required .Vector3 accelerometer = 1;
  if (has_accelerometer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->accelerometer_, false, target);
  }

  // required .Vector3 gyroscope = 2;
  if (has_gyroscope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gyroscope_, false, target);
  }

  // required float temperature = 3;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temperature(), target);
  }

  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPU6500Readings)
  return target;
}

int MPU6500Readings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MPU6500Readings)
  int total_size = 0;

  if (has_accelerometer()) {
    // required .Vector3 accelerometer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accelerometer_);
  }

  if (has_gyroscope()) {
    // required .Vector3 gyroscope = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyroscope_);
  }

  if (has_temperature()) {
    // required float temperature = 3;
    total_size += 1 + 4;
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  return total_size;
}
int MPU6500Readings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MPU6500Readings)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Vector3 accelerometer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accelerometer_);

    // required .Vector3 gyroscope = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyroscope_);

    // required float temperature = 3;
    total_size += 1 + 4;

    // required uint64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPU6500Readings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPU6500Readings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MPU6500Readings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MPU6500Readings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPU6500Readings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPU6500Readings)
    MergeFrom(*source);
  }
}

void MPU6500Readings::MergeFrom(const MPU6500Readings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPU6500Readings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accelerometer()) {
      mutable_accelerometer()->::Vector3::MergeFrom(from.accelerometer());
    }
    if (from.has_gyroscope()) {
      mutable_gyroscope()->::Vector3::MergeFrom(from.gyroscope());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MPU6500Readings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPU6500Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPU6500Readings::CopyFrom(const MPU6500Readings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPU6500Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPU6500Readings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_accelerometer()) {
    if (!this->accelerometer_->IsInitialized()) return false;
  }
  if (has_gyroscope()) {
    if (!this->gyroscope_->IsInitialized()) return false;
  }
  return true;
}

void MPU6500Readings::Swap(MPU6500Readings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPU6500Readings::InternalSwap(MPU6500Readings* other) {
  std::swap(accelerometer_, other->accelerometer_);
  std::swap(gyroscope_, other->gyroscope_);
  std::swap(temperature_, other->temperature_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPU6500Readings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MPU6500Readings_descriptor_;
  metadata.reflection = MPU6500Readings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPU6500Readings

// required .Vector3 accelerometer = 1;
bool MPU6500Readings::has_accelerometer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MPU6500Readings::set_has_accelerometer() {
  _has_bits_[0] |= 0x00000001u;
}
void MPU6500Readings::clear_has_accelerometer() {
  _has_bits_[0] &= ~0x00000001u;
}
void MPU6500Readings::clear_accelerometer() {
  if (accelerometer_ != NULL) accelerometer_->::Vector3::Clear();
  clear_has_accelerometer();
}
const ::Vector3& MPU6500Readings::accelerometer() const {
  // @@protoc_insertion_point(field_get:MPU6500Readings.accelerometer)
  return accelerometer_ != NULL ? *accelerometer_ : *default_instance_->accelerometer_;
}
::Vector3* MPU6500Readings::mutable_accelerometer() {
  set_has_accelerometer();
  if (accelerometer_ == NULL) {
    accelerometer_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MPU6500Readings.accelerometer)
  return accelerometer_;
}
::Vector3* MPU6500Readings::release_accelerometer() {
  // @@protoc_insertion_point(field_release:MPU6500Readings.accelerometer)
  clear_has_accelerometer();
  ::Vector3* temp = accelerometer_;
  accelerometer_ = NULL;
  return temp;
}
void MPU6500Readings::set_allocated_accelerometer(::Vector3* accelerometer) {
  delete accelerometer_;
  accelerometer_ = accelerometer;
  if (accelerometer) {
    set_has_accelerometer();
  } else {
    clear_has_accelerometer();
  }
  // @@protoc_insertion_point(field_set_allocated:MPU6500Readings.accelerometer)
}

// required .Vector3 gyroscope = 2;
bool MPU6500Readings::has_gyroscope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MPU6500Readings::set_has_gyroscope() {
  _has_bits_[0] |= 0x00000002u;
}
void MPU6500Readings::clear_has_gyroscope() {
  _has_bits_[0] &= ~0x00000002u;
}
void MPU6500Readings::clear_gyroscope() {
  if (gyroscope_ != NULL) gyroscope_->::Vector3::Clear();
  clear_has_gyroscope();
}
const ::Vector3& MPU6500Readings::gyroscope() const {
  // @@protoc_insertion_point(field_get:MPU6500Readings.gyroscope)
  return gyroscope_ != NULL ? *gyroscope_ : *default_instance_->gyroscope_;
}
::Vector3* MPU6500Readings::mutable_gyroscope() {
  set_has_gyroscope();
  if (gyroscope_ == NULL) {
    gyroscope_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MPU6500Readings.gyroscope)
  return gyroscope_;
}
::Vector3* MPU6500Readings::release_gyroscope() {
  // @@protoc_insertion_point(field_release:MPU6500Readings.gyroscope)
  clear_has_gyroscope();
  ::Vector3* temp = gyroscope_;
  gyroscope_ = NULL;
  return temp;
}
void MPU6500Readings::set_allocated_gyroscope(::Vector3* gyroscope) {
  delete gyroscope_;
  gyroscope_ = gyroscope;
  if (gyroscope) {
    set_has_gyroscope();
  } else {
    clear_has_gyroscope();
  }
  // @@protoc_insertion_point(field_set_allocated:MPU6500Readings.gyroscope)
}

// required float temperature = 3;
bool MPU6500Readings::has_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MPU6500Readings::set_has_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
void MPU6500Readings::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
void MPU6500Readings::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 float MPU6500Readings::temperature() const {
  // @@protoc_insertion_point(field_get:MPU6500Readings.temperature)
  return temperature_;
}
 void MPU6500Readings::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:MPU6500Readings.temperature)
}

// required uint64 timestamp = 4;
bool MPU6500Readings::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MPU6500Readings::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void MPU6500Readings::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void MPU6500Readings::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::uint64 MPU6500Readings::timestamp() const {
  // @@protoc_insertion_point(field_get:MPU6500Readings.timestamp)
  return timestamp_;
}
 void MPU6500Readings::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:MPU6500Readings.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
